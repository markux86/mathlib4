/-
Copyright (c) 2024 Jack Valmadre. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jack Valmadre
-/
import Mathlib.Algebra.Group.Pi.Basic
import Mathlib.Analysis.Calculus.FDeriv.Add
import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.Analysis.Fourier.FourierTransform
import Mathlib.Analysis.Fourier.FourierTransformDeriv
import Mathlib.Analysis.InnerProductSpace.Calculus
import Mathlib.Analysis.SpecialFunctions.Complex.Circle

/-!
# Temperate growth
-/

open scoped ContDiff FourierTransform

namespace Function

section PeriodicUtil

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]

variable (ùïú) in
/-- If a function is is periodic, then its derivative is periodic. -/
theorem Periodic.fderiv {f : E ‚Üí F} {c : E} (hf : Periodic f c) : Periodic (fderiv ùïú f) c := by
  intro x
  rw [‚Üê fderiv_comp_add_right, hf.funext]

variable (ùïú) in
/-- If a function is is periodic, then all of its derivatives are periodic. -/
theorem Periodic.iteratedFDeriv (n : ‚Ñï) {f : E ‚Üí F} {c : E} (hf : Periodic f c) :
    Periodic (iteratedFDeriv ùïú n f) c := by
  intro x
  rw [‚Üê iteratedFDeriv_comp_add_right, hf.funext]

variable {Œ± Œ≤ : Type*}
  [LinearOrderedAddCommGroup Œ±] [Archimedean Œ±] [TopologicalSpace Œ±] [CompactIccSpace Œ±]
  [LinearOrder Œ≤] [TopologicalSpace Œ≤] [ClosedIciTopology Œ≤]

theorem Periodic.bddAbove_range_of_continuous [Nonempty Œ≤] {f : Œ± ‚Üí Œ≤} {c : Œ±}
    (hf : Periodic f c) (hc : c ‚â† 0) (hf_cont : Continuous f) :
    BddAbove (Set.range f) := by
  rw [‚Üê hf.image_uIcc hc 0]
  exact IsCompact.bddAbove_image isCompact_uIcc hf_cont.continuousOn

/-- Continuous periodic functions on an infinite, ordered set are bounded. -/
theorem Periodic.exists_bound_of_continuous {f : Œ± ‚Üí F} {c : Œ±}
    (hf : Periodic f c) (hc : c ‚â† 0) (hf_cont : Continuous f) : ‚àÉ C, ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C := by
  have h := (hf.comp fun y ‚Ü¶ ‚Äñy‚Äñ).bddAbove_range_of_continuous hc hf_cont.norm
  rcases h.exists_ge 0 with ‚ü®C, _, hC‚ü©
  exact ‚ü®C, fun x ‚Ü¶ by simpa using hC ‚Äñf x‚Äñ‚ü©

end PeriodicUtil

section HasTemperateGrowth

variable {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

-- TODO: Could generalize beyond `‚Ñù`? Not necessary at this stage.
theorem Periodic.hasTemperateGrowth {f : ‚Ñù ‚Üí F} {c : ‚Ñù}
    (hf : Periodic f c) (hc : c ‚â† 0) (hf_smooth : ContDiff ‚Ñù ‚àû f) : f.HasTemperateGrowth := by
  refine ‚ü®hf_smooth, fun n ‚Ü¶ ‚ü®0, ?_‚ü©‚ü©
  simpa using (hf.iteratedFDeriv ‚Ñù n).exists_bound_of_continuous hc
    (hf_smooth.continuous_iteratedFDeriv (by norm_cast; simp))

end HasTemperateGrowth

end Function

variable {U V W : Type*}
  [NormedAddCommGroup U] [InnerProductSpace ‚Ñù U]
  [NormedAddCommGroup V] [NormedSpace ‚Ñù V]
  [NormedAddCommGroup W] [NormedSpace ‚Ñù W]

namespace Real

theorem cos_hasTemperateGrowth : cos.HasTemperateGrowth :=
  cos_periodic.hasTemperateGrowth two_pi_pos.ne' contDiff_cos

theorem sin_hasTemperateGrowth : sin.HasTemperateGrowth :=
  sin_periodic.hasTemperateGrowth two_pi_pos.ne' contDiff_sin

-- theorem bilinear_right_hasTemperateGrowth (L : V ‚ÜíL[‚Ñù] W ‚ÜíL[‚Ñù] ‚Ñù) (v : V) :
--     (L v ¬∑).HasTemperateGrowth := (L v).hasTemperateGrowth

-- theorem bilinear_left_hasTemperateGrowth (L : V ‚ÜíL[‚Ñù] W ‚ÜíL[‚Ñù] ‚Ñù) (w : W) :
--     (L ¬∑ w).HasTemperateGrowth := (L.flip w).hasTemperateGrowth

-- theorem real_inner_right_hasTemperateGrowth (a : U) : (inner a : U ‚Üí ‚Ñù).HasTemperateGrowth :=
--     bilinear_right_hasTemperateGrowth (innerSL ‚Ñù) a

-- theorem real_inner_left_hasTemperateGrowth (a : U) : (inner ¬∑ a : U ‚Üí ‚Ñù).HasTemperateGrowth :=
--     bilinear_left_hasTemperateGrowth (innerSL ‚Ñù) a

end Real

namespace Complex

open scoped Real

theorem exp_ofReal_mul_I_periodic : Function.Periodic (fun x : ‚Ñù ‚Ü¶ exp (x * I)) (2 * œÄ) :=
  fun x ‚Ü¶ by simp [add_mul, exp_add]

theorem exp_ofReal_mul_I_hasTemperateGrowth : Function.HasTemperateGrowth fun x : ‚Ñù ‚Ü¶ exp (x * I) :=
  exp_ofReal_mul_I_periodic.hasTemperateGrowth Real.two_pi_pos.ne'
    (ofRealCLM.contDiff.mul contDiff_const).cexp

theorem exp_const_ofReal_I_periodic (a : ‚Ñù) :
    Function.Periodic (fun x : ‚Ñù ‚Ü¶ exp (a * x * I)) (a‚Åª¬π * (2 * œÄ)) := by
  simpa using exp_ofReal_mul_I_periodic.const_mul a

-- TODO: Generalize to `fun x : V ‚Ü¶ exp (inner a x * I)`
theorem exp_const_ofReal_I_hasTemperateGrowth (a : ‚Ñù) :
    (fun x : ‚Ñù ‚Ü¶ exp (a * x * I)).HasTemperateGrowth := by
  norm_cast
  exact .comp exp_ofReal_mul_I_hasTemperateGrowth (ContinuousLinearMap.mul ‚Ñù ‚Ñù a).hasTemperateGrowth

-- theorem exp_const_inner_mul_I_hasTemperateGrowth (a : V) :
--     Function.HasTemperateGrowth fun x : V ‚Ü¶ exp ((inner a x : ‚Ñù) * I) :=
--   exp_ofReal_mul_I_hasTemperateGrowth.comp (Real.const_inner_hasTemperateGrowth a)

-- theorem exp_inner_const_mul_I_hasTemperateGrowth (a : V) :
--     Function.HasTemperateGrowth fun x : V ‚Ü¶ exp ((inner x a : ‚Ñù) * I) :=
--   exp_ofReal_mul_I_hasTemperateGrowth.comp (Real.inner_const_hasTemperateGrowth a)

end Complex

namespace Real

-- TODO: Move?
theorem fourierChar_periodic : (ùêû ¬∑).Periodic 1 := fun x ‚Ü¶ by
  simp [fourierChar, mul_add]

theorem coe_fourierChar_periodic : (ùêû ¬∑ : ‚Ñù ‚Üí ‚ÑÇ).Periodic 1 := by
  simp [fourierChar, mul_add]

theorem fourierChar_hasTemperateGrowth : (ùêû ¬∑ : ‚Ñù ‚Üí ‚ÑÇ).HasTemperateGrowth :=
  coe_fourierChar_periodic.hasTemperateGrowth one_ne_zero contDiff_fourierChar

-- Mimic structure of `hasFDerivAt_fourierChar_neg_bilinear_right`

theorem fourierChar_inner_right_hasTemperateGrowth (a : U) :
    (fun x ‚Ü¶ (ùêû (inner a x) : ‚ÑÇ)).HasTemperateGrowth :=
  .comp fourierChar_hasTemperateGrowth (innerSL ‚Ñù a).hasTemperateGrowth

theorem fourierChar_inner_left_hasTemperateGrowth (a : U) :
    (fun x ‚Ü¶ (ùêû (inner x a) : ‚ÑÇ)).HasTemperateGrowth :=
  .comp fourierChar_hasTemperateGrowth ((innerSL ‚Ñù).flip a).hasTemperateGrowth

theorem fourierChar_neg_inner_right_hasTemperateGrowth (a : U) :
    (fun x ‚Ü¶ (ùêû (-inner a x) : ‚ÑÇ)).HasTemperateGrowth :=
  .comp fourierChar_hasTemperateGrowth (-innerSL ‚Ñù a).hasTemperateGrowth

theorem fourierChar_neg_inner_left_hasTemperateGrowth (a : U) :
    (fun x ‚Ü¶ (ùêû (-inner x a) : ‚ÑÇ)).HasTemperateGrowth :=
  .comp fourierChar_hasTemperateGrowth (-(innerSL ‚Ñù).flip a).hasTemperateGrowth

end Real
